<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ReactJava.mapper.PostMapper">

	<select id="getPostList" parameterType="Map" resultType="Map">
		SELECT P.POST_ID AS postId
			 , P.USER_ID AS userId
			 , P.TITLE AS title
			 , P.CONTENT AS content
			 , P.CATEGORY AS category
			 , C.CODE_NM AS categoryNm
			 , P.VIEW_COUNT AS viewCount
			 , (SELECT COUNT(*) FROM COMMENTS WHERE POST_ID = P.POST_ID) AS commentCnt
			 , DATE_FORMAT(P.CREATE_AT,'%Y.%m.%d') AS createAt
		FROM POSTS P
		INNER JOIN CODE C
			ON P.CATEGORY = C.CODE
			AND C.CODE_DIV = 'CATE'
		WHERE 1=1
		<if test='postId != null and !"".equals(postId)'>
			AND P.POST_ID = #{postId}
		</if>
		<if test='category != null and !"".equals(category)'>
			AND P.CATEGORY = #{category}
		</if>
		<if test='orderType != null and !"".equals(orderType)'>
			<if test='"1".equals(orderType)'>
				ORDER BY P.VIEW_COUNT DESC
			</if>
			<if test='"2".equals(orderType)'>
				ORDER BY P.CREATE_AT ASC
			</if>
			<if test='"3".equals(orderType)'>
				ORDER BY P.CREATE_AT DESC
			</if>
			<if test='"4".equals(orderType)'>
				ORDER BY P.TITLE ASC
			</if>
			<if test='"5".equals(orderType)'>
				ORDER BY P.TITLE DESC
			</if>
		</if>
	</select>
	
	<update id="editPost" parameterType="Map">
		UPDATE POSTS SET TITLE = #{title}, CONTENT = #{content}, CATEGORY = #{category}
		WHERE POST_ID = #{postId} 
		AND USER_ID = #{userId}
	</update>
	
	<insert id="insertPost" parameterType="Map">
		INSERT INTO POSTS (
			POST_ID
		 	, USER_ID
		  	, TITLE
		  	, CONTENT
		  	, CATEGORY
		) VALUES (
			(SELECT NVL(MAX(POST_ID) + 1, 1) FROM POSTS AS SEQ)
			, #{userId}
			, #{title}
			, #{content}
			, #{category}
		)
	</insert>
	
	<update id="viewCountUp" parameterType="Map">
		UPDATE POSTS SET VIEW_COUNT = VIEW_COUNT + 1
		WHERE POST_ID = #{postId}
	</update>
	
	<select id="getHighPostIdList">
		SELECT POST_ID AS postId
			 , TYPE    AS type
		FROM
		(
			(
				SELECT POST_ID
					 , 'comment' AS TYPE
				FROM COMMENTS
				GROUP BY POST_ID
				ORDER BY COUNT(*) DESC
				LIMIT 2
			)
			UNION ALL
			(
				SELECT A.POST_ID
					 , 'viewCount' AS TYPE
				FROM POSTS A
				LEFT OUTER JOIN
				(
					SELECT POST_ID
					FROM COMMENTS
					GROUP BY POST_ID
					ORDER BY COUNT(*) DESC
					LIMIT 2
				) B
					ON A.POST_ID = B.POST_ID
				WHERE B.POST_ID IS NULL
				AND VIEW_COUNT != 0
				ORDER BY VIEW_COUNT DESC
				LIMIT 2
			)
		) TOT
	</select>
	
	<delete id="delPost" parameterType="Map">
		DELETE FROM POSTS
		WHERE POST_ID = #{postId}
	</delete>
	
</mapper>